var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"CONTROLLER/CONTROLLER","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"F:\\THE_LIBRARY\\CODE_BASE\\ROBOSERVO\\Odrive\\TINDALOS_THEDOG\\SIM_MATLAB\\DOG\\CONTROLLER0_ert_rtw","tag":"","groupDisplay":"主文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: ert_main.c\r\n *\r\n * Code generated for Simulink model 'CONTROLLER0'.\r\n *\r\n * Model version                  : 1.29\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Sat May 11 20:42:14 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include <stddef.h>\r\n#include <stdio.h>            /* This example main program uses printf/fflush */\r\n#include \"CONTROLLER0.h\"               /* Model header file */\r\n\r\n/*\r\n * Associating rt_OneStep with a real-time clock or interrupt service routine\r\n * is what makes the generated code \"real-time\".  The function rt_OneStep is\r\n * always associated with the base rate of the model.  Subrates are managed\r\n * by the base rate from inside the generated code.  Enabling/disabling\r\n * interrupts and floating point context switches are target specific.  This\r\n * example code indicates where these should take place relative to executing\r\n * the generated code step function.  Overrun behavior should be tailored to\r\n * your application needs.  This example simply sets an error status in the\r\n * real-time model and returns from rt_OneStep.\r\n */\r\nvoid rt_OneStep(void);\r\nvoid rt_OneStep(void)\r\n{\r\n  static bool OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n\r\n  /* Check for overrun */\r\n  if (OverrunFlag) {\r\n    rtmSetErrorStatus(rtM, \"Overrun\");\r\n    return;\r\n  }\r\n\r\n  OverrunFlag = true;\r\n\r\n  /* Save FPU context here (if necessary) */\r\n  /* Re-enable timer or interrupt here */\r\n  /* Set model inputs here */\r\n\r\n  /* Step the model */\r\n  CONTROLLER0_step();\r\n\r\n  /* Get model outputs here */\r\n\r\n  /* Indicate task complete */\r\n  OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n  /* Restore FPU context here (if necessary) */\r\n  /* Enable interrupts here */\r\n}\r\n\r\n/*\r\n * The example main function illustrates what is required by your\r\n * application code to initialize, execute, and terminate the generated code.\r\n * Attaching rt_OneStep to a real-time clock is target specific. This example\r\n * illustrates how you do this relative to initializing the model.\r\n */\r\nint main(int argc, const char *argv[])\r\n{\r\n  /* Unused arguments */\r\n  (void)(argc);\r\n  (void)(argv);\r\n\r\n  /* Initialize model */\r\n  CONTROLLER0_initialize();\r\n\r\n  /* Attach rt_OneStep to a timer or interrupt service routine with\r\n   * period 0.01 seconds (base rate of the model) here.\r\n   * The call syntax for rt_OneStep is\r\n   *\r\n   *  rt_OneStep();\r\n   */\r\n  printf(\"Warning: The simulation will run forever. \"\r\n         \"Generated ERT main won't simulate model step behavior. \"\r\n         \"To change this behavior select the 'MAT-file logging' option.\\n\");\r\n  fflush((NULL));\r\n  while (rtmGetErrorStatus(rtM) == (NULL)) {\r\n    /*  Perform application tasks here */\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"CONTROLLER0.c","type":"source","group":"model","path":"F:\\THE_LIBRARY\\CODE_BASE\\ROBOSERVO\\Odrive\\TINDALOS_THEDOG\\SIM_MATLAB\\DOG\\CONTROLLER0_ert_rtw","tag":"","groupDisplay":"模型文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: CONTROLLER0.c\r\n *\r\n * Code generated for Simulink model 'CONTROLLER0'.\r\n *\r\n * Model version                  : 1.29\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Sat May 11 20:42:14 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"CONTROLLER0.h\"\r\n#include <math.h>\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nExtU rtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nExtY rtY;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL rtM_;\r\nRT_MODEL *const rtM = &rtM_;\r\nstatic void uTm_x1(float rtu_u, double rtu_Tm, float rtu_S, float *rty_x);\r\nstatic void uTm_y2(float rtu_u, double rtu_Tm, double rtu_H, float *rty_y);\r\nstatic void MATLABFunction1(float rtu_x1, double rtu_z1, float *rty_theta_OUT,\r\n  float *rty_theta_IN);\r\n\r\n/*\r\n * Output and update for atomic system:\r\n *    '<S2>/0-Tm_x1'\r\n *    '<S3>/0-Tm_x1'\r\n *    '<S4>/0-Tm_x1'\r\n *    '<S5>/0-Tm_x1'\r\n */\r\nstatic void uTm_x1(float rtu_u, double rtu_Tm, float rtu_S, float *rty_x)\r\n{\r\n  if (rtu_u > 0.0F) {\r\n    *rty_x = (rtu_u / (float)rtu_Tm - sinf(6.28318548F * rtu_u / (float)rtu_Tm) *\r\n              0.159154937F) * rtu_S;\r\n  } else {\r\n    *rty_x = (-rtu_u / (float)rtu_Tm - sinf(6.28318548F * -rtu_u / (float)rtu_Tm)\r\n              * 0.159154937F) * rtu_S;\r\n  }\r\n}\r\n\r\n/*\r\n * Output and update for atomic system:\r\n *    '<S2>/0-Tm_y2'\r\n *    '<S3>/0-Tm_y2'\r\n *    '<S4>/0-Tm_y2'\r\n */\r\nstatic void uTm_y2(float rtu_u, double rtu_Tm, double rtu_H, float *rty_y)\r\n{\r\n  if (rtu_u > 0.0F) {\r\n    float tmp;\r\n    float tmp_0;\r\n    tmp = sinf(12.566371F * rtu_u / (float)rtu_Tm) * 0.0795774683F;\r\n    tmp_0 = rtu_u / (float)rtu_Tm;\r\n    *rty_y = ((1.0F - tmp_0) + tmp) * (float)(2.0 * rtu_H) * (float)((rtu_u >=\r\n      rtu_Tm / 2.0) && (rtu_u < rtu_Tm)) + (tmp_0 - tmp) * (float)(2.0 * rtu_H) *\r\n      (float)(rtu_u < rtu_Tm / 2.0);\r\n  } else {\r\n    *rty_y = 0.0F;\r\n  }\r\n}\r\n\r\n/*\r\n * Output and update for atomic system:\r\n *    '<S2>/MATLAB Function1'\r\n *    '<S3>/MATLAB Function1'\r\n *    '<S4>/MATLAB Function1'\r\n *    '<S5>/MATLAB Function1'\r\n */\r\nstatic void MATLABFunction1(float rtu_x1, double rtu_z1, float *rty_theta_OUT,\r\n  float *rty_theta_IN)\r\n{\r\n  float L;\r\n  float theta_left;\r\n  L = sqrtf(rtu_x1 * rtu_x1 + (float)(rtu_z1 * rtu_z1));\r\n  theta_left = asinf(rtu_x1 / L) * 57.2957802F;\r\n  L = acosf(((L * L + 10000.0F) - 32400.0F) / (200.0F * L)) * 57.2957802F;\r\n  *rty_theta_OUT = L - theta_left;\r\n  *rty_theta_IN = L + theta_left;\r\n}\r\n\r\n/* Model step function */\r\nvoid CONTROLLER0_step(void)\r\n{\r\n  double rtb_Sum_i;\r\n  float rtb_theta_IN;\r\n  float rtb_theta_OUT;\r\n  float rtb_y;\r\n\r\n  /* MATLAB Function: '<S5>/0-Tm_x1' incorporates:\r\n   *  Constant: '<S5>/&#x6446;&#x52A8;&#x76F8;&#x5468;&#x671F;2'\r\n   *  Inport: '<Root>/RF_X'\r\n   *  Inport: '<Root>/R_LENGTH'\r\n   */\r\n  uTm_x1(rtU.RF_X, 2.0, rtU.R_LENGTH, &rtb_theta_OUT);\r\n\r\n  /* MATLAB Function: '<S5>/0-Tm_y2' incorporates:\r\n   *  Constant: '<S5>/&#x62AC;&#x817F;&#x9AD8;&#x5EA6;2'\r\n   *  Constant: '<S5>/&#x6446;&#x52A8;&#x76F8;&#x5468;&#x671F;2'\r\n   *  Inport: '<Root>/RF_Y'\r\n   */\r\n  if (rtU.RF_Y > 0.0F) {\r\n    rtb_y = sinf(12.566371F * rtU.RF_Y / 2.0F) * 0.0795774683F;\r\n    rtb_y = ((1.0F - rtU.RF_Y / 2.0F) + rtb_y) * 80.0F * (float)((rtU.RF_Y >=\r\n      1.0F) && (rtU.RF_Y < 2.0F)) + (rtU.RF_Y / 2.0F - rtb_y) * 80.0F * (float)\r\n      ((rtU.RF_Y >= 0.0F) && (rtU.RF_Y < 1.0F));\r\n  } else {\r\n    rtb_y = 0.0F;\r\n  }\r\n\r\n  /* End of MATLAB Function: '<S5>/0-Tm_y2' */\r\n\r\n  /* MATLAB Function: '<S5>/MATLAB Function1' incorporates:\r\n   *  Constant: '<S5>/Constant3'\r\n   *  Gain: '<S5>/Gain4'\r\n   *  Inport: '<Root>/R_LENGTH'\r\n   *  Sum: '<S5>/Sum'\r\n   *  Sum: '<S5>/Sum1'\r\n   */\r\n  MATLABFunction1(rtb_theta_OUT - 0.5F * rtU.R_LENGTH, rtb_y - 200.0,\r\n                  &rtb_theta_IN, &rtb_theta_OUT);\r\n\r\n  /* Outport: '<Root>/RF_theta_out' incorporates:\r\n   *  Gain: '<S24>/Gain1'\r\n   */\r\n  rtY.RF_theta_out = 0.0174532924F * rtb_theta_IN;\r\n\r\n  /* Outport: '<Root>/RF_theta_in' incorporates:\r\n   *  Gain: '<S23>/Gain1'\r\n   */\r\n  rtY.RF_theta_in = 0.0174532924F * rtb_theta_OUT;\r\n\r\n  /* MATLAB Function: '<S4>/0-Tm_y2' incorporates:\r\n   *  Constant: '<S4>/&#x62AC;&#x817F;&#x9AD8;&#x5EA6;2'\r\n   *  Constant: '<S4>/&#x6446;&#x52A8;&#x76F8;&#x5468;&#x671F;2'\r\n   *  Inport: '<Root>/RB_Y'\r\n   */\r\n  uTm_y2(rtU.RB_Y, 2.0, 40.0, &rtb_theta_OUT);\r\n\r\n  /* Sum: '<S4>/Sum' incorporates:\r\n   *  Constant: '<S4>/Constant3'\r\n   */\r\n  rtb_Sum_i = rtb_theta_OUT - 200.0;\r\n\r\n  /* MATLAB Function: '<S4>/0-Tm_x1' incorporates:\r\n   *  Constant: '<S4>/&#x6446;&#x52A8;&#x76F8;&#x5468;&#x671F;2'\r\n   *  Inport: '<Root>/RB_X'\r\n   *  Inport: '<Root>/R_LENGTH'\r\n   */\r\n  uTm_x1(rtU.RB_X, 2.0, rtU.R_LENGTH, &rtb_theta_OUT);\r\n\r\n  /* MATLAB Function: '<S4>/MATLAB Function1' incorporates:\r\n   *  Gain: '<S4>/Gain4'\r\n   *  Inport: '<Root>/R_LENGTH'\r\n   *  Sum: '<S4>/Sum1'\r\n   */\r\n  MATLABFunction1(rtb_theta_OUT - 0.5F * rtU.R_LENGTH, rtb_Sum_i, &rtb_theta_OUT,\r\n                  &rtb_theta_IN);\r\n\r\n  /* Outport: '<Root>/RB_theta_out' incorporates:\r\n   *  Gain: '<S19>/Gain1'\r\n   *  Gain: '<S4>/Gain1'\r\n   */\r\n  rtY.RB_theta_out = 0.0174532924F * -rtb_theta_OUT;\r\n\r\n  /* Outport: '<Root>/RB_theta_in' incorporates:\r\n   *  Gain: '<S18>/Gain1'\r\n   *  Gain: '<S4>/Gain'\r\n   */\r\n  rtY.RB_theta_in = 0.0174532924F * -rtb_theta_IN;\r\n\r\n  /* MATLAB Function: '<S2>/0-Tm_y2' incorporates:\r\n   *  Constant: '<S2>/&#x62AC;&#x817F;&#x9AD8;&#x5EA6;2'\r\n   *  Constant: '<S2>/&#x6446;&#x52A8;&#x76F8;&#x5468;&#x671F;2'\r\n   *  Inport: '<Root>/LB_Y'\r\n   */\r\n  uTm_y2(rtU.LB_Y, 2.0, 40.0, &rtb_theta_OUT);\r\n\r\n  /* Sum: '<S2>/Sum' incorporates:\r\n   *  Constant: '<S2>/Constant3'\r\n   */\r\n  rtb_Sum_i = rtb_theta_OUT - 200.0;\r\n\r\n  /* MATLAB Function: '<S2>/0-Tm_x1' incorporates:\r\n   *  Constant: '<S2>/&#x6446;&#x52A8;&#x76F8;&#x5468;&#x671F;2'\r\n   *  Inport: '<Root>/LB_X'\r\n   *  Inport: '<Root>/L_LENGTH'\r\n   */\r\n  uTm_x1(rtU.LB_X, 2.0, rtU.L_LENGTH, &rtb_theta_OUT);\r\n\r\n  /* MATLAB Function: '<S2>/MATLAB Function1' incorporates:\r\n   *  Gain: '<S2>/Gain4'\r\n   *  Inport: '<Root>/L_LENGTH'\r\n   *  Sum: '<S2>/Sum1'\r\n   */\r\n  MATLABFunction1(rtb_theta_OUT - 0.5F * rtU.L_LENGTH, rtb_Sum_i, &rtb_theta_OUT,\r\n                  &rtb_theta_IN);\r\n\r\n  /* Outport: '<Root>/LB_theta_out' incorporates:\r\n   *  Gain: '<S9>/Gain1'\r\n   */\r\n  rtY.LB_theta_out = 0.0174532924F * rtb_theta_OUT;\r\n\r\n  /* Outport: '<Root>/LB_theta_in' incorporates:\r\n   *  Gain: '<S8>/Gain1'\r\n   */\r\n  rtY.LB_theta_in = 0.0174532924F * rtb_theta_IN;\r\n\r\n  /* MATLAB Function: '<S3>/0-Tm_y2' incorporates:\r\n   *  Constant: '<S3>/&#x62AC;&#x817F;&#x9AD8;&#x5EA6;2'\r\n   *  Constant: '<S3>/&#x6446;&#x52A8;&#x76F8;&#x5468;&#x671F;2'\r\n   *  Inport: '<Root>/LF_Y'\r\n   */\r\n  uTm_y2(rtU.LF_Y, 2.0, 40.0, &rtb_theta_OUT);\r\n\r\n  /* Sum: '<S3>/Sum' incorporates:\r\n   *  Constant: '<S3>/Constant3'\r\n   */\r\n  rtb_Sum_i = rtb_theta_OUT - 200.0;\r\n\r\n  /* MATLAB Function: '<S3>/0-Tm_x1' incorporates:\r\n   *  Constant: '<S3>/&#x6446;&#x52A8;&#x76F8;&#x5468;&#x671F;2'\r\n   *  Inport: '<Root>/LF_X'\r\n   *  Inport: '<Root>/L_LENGTH'\r\n   */\r\n  uTm_x1(rtU.LF_X, 2.0, rtU.L_LENGTH, &rtb_theta_OUT);\r\n\r\n  /* MATLAB Function: '<S3>/MATLAB Function1' incorporates:\r\n   *  Gain: '<S3>/Gain4'\r\n   *  Inport: '<Root>/L_LENGTH'\r\n   *  Sum: '<S3>/Sum1'\r\n   */\r\n  MATLABFunction1(rtb_theta_OUT - 0.5F * rtU.L_LENGTH, rtb_Sum_i, &rtb_theta_OUT,\r\n                  &rtb_theta_IN);\r\n\r\n  /* Outport: '<Root>/LF_theta_out' incorporates:\r\n   *  Gain: '<S14>/Gain1'\r\n   *  Gain: '<S3>/Gain'\r\n   */\r\n  rtY.LF_theta_out = 0.0174532924F * -rtb_theta_IN;\r\n\r\n  /* Outport: '<Root>/LF_theta_in' incorporates:\r\n   *  Gain: '<S13>/Gain1'\r\n   *  Gain: '<S3>/Gain1'\r\n   */\r\n  rtY.LF_theta_in = 0.0174532924F * -rtb_theta_OUT;\r\n}\r\n\r\n/* Model initialize function */\r\nvoid CONTROLLER0_initialize(void)\r\n{\r\n  /* (no initialization code required) */\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"CONTROLLER0.h","type":"header","group":"model","path":"F:\\THE_LIBRARY\\CODE_BASE\\ROBOSERVO\\Odrive\\TINDALOS_THEDOG\\SIM_MATLAB\\DOG\\CONTROLLER0_ert_rtw","tag":"","groupDisplay":"模型文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: CONTROLLER0.h\r\n *\r\n * Code generated for Simulink model 'CONTROLLER0'.\r\n *\r\n * Model version                  : 1.29\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Sat May 11 20:42:14 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_CONTROLLER0_h_\r\n#define RTW_HEADER_CONTROLLER0_h_\r\n#ifndef CONTROLLER0_COMMON_INCLUDES_\r\n#define CONTROLLER0_COMMON_INCLUDES_\r\n#include <stdbool.h>\r\n#include <stdint.h>\r\n#endif                                 /* CONTROLLER0_COMMON_INCLUDES_ */\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM RT_MODEL;\r\n\r\n/* External inputs (root inport signals with default storage) */\r\ntypedef struct {\r\n  float RF_X;                          /* '<Root>/RF_X' */\r\n  float RF_Y;                          /* '<Root>/RF_Y' */\r\n  float RB_X;                          /* '<Root>/RB_X' */\r\n  float RB_Y;                          /* '<Root>/RB_Y' */\r\n  float LF_X;                          /* '<Root>/LF_X' */\r\n  float LF_Y;                          /* '<Root>/LF_Y' */\r\n  float LB_X;                          /* '<Root>/LB_X' */\r\n  float LB_Y;                          /* '<Root>/LB_Y' */\r\n  float R_LENGTH;                      /* '<Root>/R_LENGTH' */\r\n  float L_LENGTH;                      /* '<Root>/L_LENGTH' */\r\n} ExtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\ntypedef struct {\r\n  float RF_theta_out;                  /* '<Root>/RF_theta_out' */\r\n  float RF_theta_in;                   /* '<Root>/RF_theta_in' */\r\n  float RB_theta_out;                  /* '<Root>/RB_theta_out' */\r\n  float RB_theta_in;                   /* '<Root>/RB_theta_in' */\r\n  float LF_theta_out;                  /* '<Root>/LF_theta_out' */\r\n  float LF_theta_in;                   /* '<Root>/LF_theta_in' */\r\n  float LB_theta_out;                  /* '<Root>/LB_theta_out' */\r\n  float LB_theta_in;                   /* '<Root>/LB_theta_in' */\r\n} ExtY;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM {\r\n  const char * volatile errorStatus;\r\n};\r\n\r\n/* External inputs (root inport signals with default storage) */\r\nextern ExtU rtU;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nextern ExtY rtY;\r\n\r\n/* Model entry point functions */\r\nextern void CONTROLLER0_initialize(void);\r\nextern void CONTROLLER0_step(void);\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL *const rtM;\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<S2>/&#x6B65;&#x957F;2' : Unused code path elimination\r\n * Block '<S3>/&#x6B65;&#x957F;2' : Unused code path elimination\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Note that this particular code originates from a subsystem build,\r\n * and has its own system numbers different from the parent model.\r\n * Refer to the system hierarchy for this subsystem below, and use the\r\n * MATLAB hilite_system command to trace the generated code back\r\n * to the parent model.  For example,\r\n *\r\n * hilite_system('CONTROLLER/CONTROLLER')    - opens subsystem CONTROLLER/CONTROLLER\r\n * hilite_system('CONTROLLER/CONTROLLER/Kp') - opens and selects block Kp\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'CONTROLLER'\r\n * '<S1>'   : 'CONTROLLER/CONTROLLER'\r\n * '<S2>'   : 'CONTROLLER/CONTROLLER/CONTROLLER_LB'\r\n * '<S3>'   : 'CONTROLLER/CONTROLLER/CONTROLLER_LF'\r\n * '<S4>'   : 'CONTROLLER/CONTROLLER/CONTROLLER_RB'\r\n * '<S5>'   : 'CONTROLLER/CONTROLLER/CONTROLLER_RF'\r\n * '<S6>'   : 'CONTROLLER/CONTROLLER/CONTROLLER_LB/0-Tm_x1'\r\n * '<S7>'   : 'CONTROLLER/CONTROLLER/CONTROLLER_LB/0-Tm_y2'\r\n * '<S8>'   : 'CONTROLLER/CONTROLLER/CONTROLLER_LB/Degrees to Radians1'\r\n * '<S9>'   : 'CONTROLLER/CONTROLLER/CONTROLLER_LB/Degrees to Radians2'\r\n * '<S10>'  : 'CONTROLLER/CONTROLLER/CONTROLLER_LB/MATLAB Function1'\r\n * '<S11>'  : 'CONTROLLER/CONTROLLER/CONTROLLER_LF/0-Tm_x1'\r\n * '<S12>'  : 'CONTROLLER/CONTROLLER/CONTROLLER_LF/0-Tm_y2'\r\n * '<S13>'  : 'CONTROLLER/CONTROLLER/CONTROLLER_LF/Degrees to Radians1'\r\n * '<S14>'  : 'CONTROLLER/CONTROLLER/CONTROLLER_LF/Degrees to Radians2'\r\n * '<S15>'  : 'CONTROLLER/CONTROLLER/CONTROLLER_LF/MATLAB Function1'\r\n * '<S16>'  : 'CONTROLLER/CONTROLLER/CONTROLLER_RB/0-Tm_x1'\r\n * '<S17>'  : 'CONTROLLER/CONTROLLER/CONTROLLER_RB/0-Tm_y2'\r\n * '<S18>'  : 'CONTROLLER/CONTROLLER/CONTROLLER_RB/Degrees to Radians1'\r\n * '<S19>'  : 'CONTROLLER/CONTROLLER/CONTROLLER_RB/Degrees to Radians2'\r\n * '<S20>'  : 'CONTROLLER/CONTROLLER/CONTROLLER_RB/MATLAB Function1'\r\n * '<S21>'  : 'CONTROLLER/CONTROLLER/CONTROLLER_RF/0-Tm_x1'\r\n * '<S22>'  : 'CONTROLLER/CONTROLLER/CONTROLLER_RF/0-Tm_y2'\r\n * '<S23>'  : 'CONTROLLER/CONTROLLER/CONTROLLER_RF/Degrees to Radians1'\r\n * '<S24>'  : 'CONTROLLER/CONTROLLER/CONTROLLER_RF/Degrees to Radians2'\r\n * '<S25>'  : 'CONTROLLER/CONTROLLER/CONTROLLER_RF/MATLAB Function1'\r\n */\r\n#endif                                 /* RTW_HEADER_CONTROLLER0_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true}};
var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"OUTTO_STMCODEER/TESTOUT","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"F:\\THE_LIBRARY\\CODE_BASE\\ROBOSERVO\\Odrive\\TINDALOS_THEDOG\\SIM_MATLAB\\TESTOUT_ert_rtw","tag":"","groupDisplay":"主文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: ert_main.c\r\n *\r\n * Code generated for Simulink model 'TESTOUT'.\r\n *\r\n * Model version                  : 1.53\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Thu Apr 18 11:16:35 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include <stddef.h>\r\n#include <stdio.h>            /* This example main program uses printf/fflush */\r\n#include \"TESTOUT.h\"                   /* Model header file */\r\n\r\n/*\r\n * Associating rt_OneStep with a real-time clock or interrupt service routine\r\n * is what makes the generated code \"real-time\".  The function rt_OneStep is\r\n * always associated with the base rate of the model.  Subrates are managed\r\n * by the base rate from inside the generated code.  Enabling/disabling\r\n * interrupts and floating point context switches are target specific.  This\r\n * example code indicates where these should take place relative to executing\r\n * the generated code step function.  Overrun behavior should be tailored to\r\n * your application needs.  This example simply sets an error status in the\r\n * real-time model and returns from rt_OneStep.\r\n */\r\nvoid rt_OneStep(void);\r\nvoid rt_OneStep(void)\r\n{\r\n  static boolean_T OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n\r\n  /* Check for overrun */\r\n  if (OverrunFlag) {\r\n    rtmSetErrorStatus(rtM, \"Overrun\");\r\n    return;\r\n  }\r\n\r\n  OverrunFlag = true;\r\n\r\n  /* Save FPU context here (if necessary) */\r\n  /* Re-enable timer or interrupt here */\r\n  /* Set model inputs here */\r\n\r\n  /* Step the model */\r\n  TESTOUT_step();\r\n\r\n  /* Get model outputs here */\r\n\r\n  /* Indicate task complete */\r\n  OverrunFlag = false;\r\n\r\n  /* Disable interrupts here */\r\n  /* Restore FPU context here (if necessary) */\r\n  /* Enable interrupts here */\r\n}\r\n\r\n/*\r\n * The example main function illustrates what is required by your\r\n * application code to initialize, execute, and terminate the generated code.\r\n * Attaching rt_OneStep to a real-time clock is target specific. This example\r\n * illustrates how you do this relative to initializing the model.\r\n */\r\nint_T main(int_T argc, const char *argv[])\r\n{\r\n  /* Unused arguments */\r\n  (void)(argc);\r\n  (void)(argv);\r\n\r\n  /* Initialize model */\r\n  TESTOUT_initialize();\r\n\r\n  /* Simulating the model step behavior (in non real-time) to\r\n   *  simulate model behavior at stop time.\r\n   */\r\n  while ((rtmGetErrorStatus(rtM) == (NULL)) && !rtmGetStopRequested(rtM)) {\r\n    rt_OneStep();\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"TESTOUT.c","type":"source","group":"model","path":"F:\\THE_LIBRARY\\CODE_BASE\\ROBOSERVO\\Odrive\\TINDALOS_THEDOG\\SIM_MATLAB\\TESTOUT_ert_rtw","tag":"","groupDisplay":"模型文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: TESTOUT.c\r\n *\r\n * Code generated for Simulink model 'TESTOUT'.\r\n *\r\n * Model version                  : 1.53\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Thu Apr 18 11:16:35 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"TESTOUT.h\"\r\n#include \"rtwtypes.h\"\r\n#include <math.h>\r\n\r\n/* Private macros used by the generated code to access rtModel */\r\n#ifndef rtmIsMajorTimeStep\r\n#define rtmIsMajorTimeStep(rtm)        (((rtm)->Timing.simTimeStep) == MAJOR_TIME_STEP)\r\n#endif\r\n\r\n#ifndef rtmIsMinorTimeStep\r\n#define rtmIsMinorTimeStep(rtm)        (((rtm)->Timing.simTimeStep) == MINOR_TIME_STEP)\r\n#endif\r\n\r\n#ifndef rtmSetTPtr\r\n#define rtmSetTPtr(rtm, val)           ((rtm)->Timing.t = (val))\r\n#endif\r\n\r\n/* Continuous states */\r\nX rtX;\r\n\r\n/* Block signals and states (default storage) */\r\nDW rtDW;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nExtY rtY;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL rtM_;\r\nRT_MODEL *const rtM = &rtM_;\r\nreal_T rt_TDelayInterpolate(\r\n  real_T tMinusDelay,                 /* tMinusDelay = currentSimTime - delay */\r\n  real_T tStart,\r\n  real_T *uBuf,\r\n  int_T bufSz,\r\n  int_T *lastIdx,\r\n  int_T oldestIdx,\r\n  int_T newIdx,\r\n  real_T initOutput,\r\n  boolean_T discrete,\r\n  boolean_T minorStepAndTAtLastMajorOutput)\r\n  ;\r\nstatic void MATLABFunction(real_T rtu_u, real_T *rty_y);\r\n\r\n/* private model entry point functions */\r\nextern void TESTOUT_derivatives(void);\r\nstatic void rate_scheduler(void);\r\n\r\n/*\r\n * Time delay interpolation routine\r\n *\r\n * The linear interpolation is performed using the formula:\r\n *\r\n * (t2 - tMinusDelay)         (tMinusDelay - t1)\r\n * u(t)  =  ----------------- * u1  +  ------------------- * u2\r\n * (t2 - t1)                  (t2 - t1)\r\n */\r\nreal_T rt_TDelayInterpolate(\r\n  real_T tMinusDelay,                 /* tMinusDelay = currentSimTime - delay */\r\n  real_T tStart,\r\n  real_T *uBuf,\r\n  int_T bufSz,\r\n  int_T *lastIdx,\r\n  int_T oldestIdx,\r\n  int_T newIdx,\r\n  real_T initOutput,\r\n  boolean_T discrete,\r\n  boolean_T minorStepAndTAtLastMajorOutput)\r\n{\r\n  int_T i;\r\n  real_T yout, t1, t2, u1, u2;\r\n  real_T* tBuf = uBuf + bufSz;\r\n\r\n  /*\r\n   * If there is only one data point in the buffer, this data point must be\r\n   * the t= 0 and tMinusDelay > t0, it ask for something unknown. The best\r\n   * guess if initial output as well\r\n   */\r\n  if ((newIdx == 0) && (oldestIdx ==0 ) && (tMinusDelay > tStart))\r\n    return initOutput;\r\n\r\n  /*\r\n   * If tMinusDelay is less than zero, should output initial value\r\n   */\r\n  if (tMinusDelay <= tStart)\r\n    return initOutput;\r\n\r\n  /* For fixed buffer extrapolation:\r\n   * if tMinusDelay is small than the time at oldestIdx, if discrete, output\r\n   * tailptr value,  else use tailptr and tailptr+1 value to extrapolate\r\n   * It is also for fixed buffer. Note: The same condition can happen for transport delay block where\r\n   * use tStart and and t[tail] other than using t[tail] and t[tail+1].\r\n   * See below\r\n   */\r\n  if ((tMinusDelay <= tBuf[oldestIdx] ) ) {\r\n    if (discrete) {\r\n      return(uBuf[oldestIdx]);\r\n    } else {\r\n      int_T tempIdx= oldestIdx + 1;\r\n      if (oldestIdx == bufSz-1)\r\n        tempIdx = 0;\r\n      t1= tBuf[oldestIdx];\r\n      t2= tBuf[tempIdx];\r\n      u1= uBuf[oldestIdx];\r\n      u2= uBuf[tempIdx];\r\n      if (t2 == t1) {\r\n        if (tMinusDelay >= t2) {\r\n          yout = u2;\r\n        } else {\r\n          yout = u1;\r\n        }\r\n      } else {\r\n        real_T f1 = (t2-tMinusDelay) / (t2-t1);\r\n        real_T f2 = 1.0 - f1;\r\n\r\n        /*\r\n         * Use Lagrange's interpolation formula.  Exact outputs at t1, t2.\r\n         */\r\n        yout = f1*u1 + f2*u2;\r\n      }\r\n\r\n      return yout;\r\n    }\r\n  }\r\n\r\n  /*\r\n   * When block does not have direct feedthrough, we use the table of\r\n   * values to extrapolate off the end of the table for delays that are less\r\n   * than 0 (less then step size).  This is not completely accurate.  The\r\n   * chain of events is as follows for a given time t.  Major output - look\r\n   * in table.  Update - add entry to table.  Now, if we call the output at\r\n   * time t again, there is a new entry in the table. For very small delays,\r\n   * this means that we will have a different answer from the previous call\r\n   * to the output fcn at the same time t.  The following code prevents this\r\n   * from happening.\r\n   */\r\n  if (minorStepAndTAtLastMajorOutput) {\r\n    /* pretend that the new entry has not been added to table */\r\n    if (newIdx != 0) {\r\n      if (*lastIdx == newIdx) {\r\n        (*lastIdx)--;\r\n      }\r\n\r\n      newIdx--;\r\n    } else {\r\n      if (*lastIdx == newIdx) {\r\n        *lastIdx = bufSz-1;\r\n      }\r\n\r\n      newIdx = bufSz - 1;\r\n    }\r\n  }\r\n\r\n  i = *lastIdx;\r\n  if (tBuf[i] < tMinusDelay) {\r\n    /* Look forward starting at last index */\r\n    while (tBuf[i] < tMinusDelay) {\r\n      /* May occur if the delay is less than step-size - extrapolate */\r\n      if (i == newIdx)\r\n        break;\r\n      i = ( i < (bufSz-1) ) ? (i+1) : 0;/* move through buffer */\r\n    }\r\n  } else {\r\n    /*\r\n     * Look backwards starting at last index which can happen when the\r\n     * delay time increases.\r\n     */\r\n    while (tBuf[i] >= tMinusDelay) {\r\n      /*\r\n       * Due to the entry condition at top of function, we\r\n       * should never hit the end.\r\n       */\r\n      i = (i > 0) ? i-1 : (bufSz-1);   /* move through buffer */\r\n    }\r\n\r\n    i = ( i < (bufSz-1) ) ? (i+1) : 0;\r\n  }\r\n\r\n  *lastIdx = i;\r\n  if (discrete) {\r\n    /*\r\n     * tempEps = 128 * eps;\r\n     * localEps = max(tempEps, tempEps*fabs(tBuf[i]))/2;\r\n     */\r\n    double tempEps = (DBL_EPSILON) * 128.0;\r\n    double localEps = tempEps * fabs(tBuf[i]);\r\n    if (tempEps > localEps) {\r\n      localEps = tempEps;\r\n    }\r\n\r\n    localEps = localEps / 2.0;\r\n    if (tMinusDelay >= (tBuf[i] - localEps)) {\r\n      yout = uBuf[i];\r\n    } else {\r\n      if (i == 0) {\r\n        yout = uBuf[bufSz-1];\r\n      } else {\r\n        yout = uBuf[i-1];\r\n      }\r\n    }\r\n  } else {\r\n    if (i == 0) {\r\n      t1 = tBuf[bufSz-1];\r\n      u1 = uBuf[bufSz-1];\r\n    } else {\r\n      t1 = tBuf[i-1];\r\n      u1 = uBuf[i-1];\r\n    }\r\n\r\n    t2 = tBuf[i];\r\n    u2 = uBuf[i];\r\n    if (t2 == t1) {\r\n      if (tMinusDelay >= t2) {\r\n        yout = u2;\r\n      } else {\r\n        yout = u1;\r\n      }\r\n    } else {\r\n      real_T f1 = (t2-tMinusDelay) / (t2-t1);\r\n      real_T f2 = 1.0 - f1;\r\n\r\n      /*\r\n       * Use Lagrange's interpolation formula.  Exact outputs at t1, t2.\r\n       */\r\n      yout = f1*u1 + f2*u2;\r\n    }\r\n  }\r\n\r\n  return(yout);\r\n}\r\n\r\n/*\r\n *         This function updates active task flag for each subrate.\r\n *         The function is called at model base rate, hence the\r\n *         generated code self-manages all its subrates.\r\n */\r\nstatic void rate_scheduler(void)\r\n{\r\n  /* Compute which subrates run during the next base time step.  Subrates\r\n   * are an integer multiple of the base rate counter.  Therefore, the subtask\r\n   * counter is reset when it reaches its limit (zero means run).\r\n   */\r\n  (rtM->Timing.TaskCounters.TID[2])++;\r\n  if ((rtM->Timing.TaskCounters.TID[2]) > 9999) {/* Sample time: [1.0s, 0.0s] */\r\n    rtM->Timing.TaskCounters.TID[2] = 0;\r\n  }\r\n\r\n  (rtM->Timing.TaskCounters.TID[3])++;\r\n  if ((rtM->Timing.TaskCounters.TID[3]) > 19999) {/* Sample time: [2.0s, 0.0s] */\r\n    rtM->Timing.TaskCounters.TID[3] = 0;\r\n  }\r\n\r\n  (rtM->Timing.TaskCounters.TID[4])++;\r\n  if ((rtM->Timing.TaskCounters.TID[4]) > 39999) {/* Sample time: [4.0s, 0.0s] */\r\n    rtM->Timing.TaskCounters.TID[4] = 0;\r\n  }\r\n}\r\n\r\n/*\r\n * This function updates continuous states using the ODE3 fixed-step\r\n * solver algorithm\r\n */\r\nstatic void rt_ertODEUpdateContinuousStates(RTWSolverInfo *si )\r\n{\r\n  /* Solver Matrices */\r\n  static const real_T rt_ODE3_A[3] = {\r\n    1.0/2.0, 3.0/4.0, 1.0\r\n  };\r\n\r\n  static const real_T rt_ODE3_B[3][3] = {\r\n    { 1.0/2.0, 0.0, 0.0 },\r\n\r\n    { 0.0, 3.0/4.0, 0.0 },\r\n\r\n    { 2.0/9.0, 1.0/3.0, 4.0/9.0 }\r\n  };\r\n\r\n  time_T t = rtsiGetT(si);\r\n  time_T tnew = rtsiGetSolverStopTime(si);\r\n  time_T h = rtsiGetStepSize(si);\r\n  real_T *x = rtsiGetContStates(si);\r\n  ODE3_IntgData *id = (ODE3_IntgData *)rtsiGetSolverData(si);\r\n  real_T *y = id->y;\r\n  real_T *f0 = id->f[0];\r\n  real_T *f1 = id->f[1];\r\n  real_T *f2 = id->f[2];\r\n  real_T hB[3];\r\n  int_T i;\r\n  int_T nXc = 2;\r\n  rtsiSetSimTimeStep(si,MINOR_TIME_STEP);\r\n\r\n  /* Save the state values at time t in y, we'll use x as ynew. */\r\n  (void) memcpy(y, x,\r\n                (uint_T)nXc*sizeof(real_T));\r\n\r\n  /* Assumes that rtsiSetT and ModelOutputs are up-to-date */\r\n  /* f0 = f(t,y) */\r\n  rtsiSetdX(si, f0);\r\n  TESTOUT_derivatives();\r\n\r\n  /* f(:,2) = feval(odefile, t + hA(1), y + f*hB(:,1), args(:)(*)); */\r\n  hB[0] = h * rt_ODE3_B[0][0];\r\n  for (i = 0; i < nXc; i++) {\r\n    x[i] = y[i] + (f0[i]*hB[0]);\r\n  }\r\n\r\n  rtsiSetT(si, t + h*rt_ODE3_A[0]);\r\n  rtsiSetdX(si, f1);\r\n  TESTOUT_step();\r\n  TESTOUT_derivatives();\r\n\r\n  /* f(:,3) = feval(odefile, t + hA(2), y + f*hB(:,2), args(:)(*)); */\r\n  for (i = 0; i <= 1; i++) {\r\n    hB[i] = h * rt_ODE3_B[1][i];\r\n  }\r\n\r\n  for (i = 0; i < nXc; i++) {\r\n    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1]);\r\n  }\r\n\r\n  rtsiSetT(si, t + h*rt_ODE3_A[1]);\r\n  rtsiSetdX(si, f2);\r\n  TESTOUT_step();\r\n  TESTOUT_derivatives();\r\n\r\n  /* tnew = t + hA(3);\r\n     ynew = y + f*hB(:,3); */\r\n  for (i = 0; i <= 2; i++) {\r\n    hB[i] = h * rt_ODE3_B[2][i];\r\n  }\r\n\r\n  for (i = 0; i < nXc; i++) {\r\n    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1] + f2[i]*hB[2]);\r\n  }\r\n\r\n  rtsiSetT(si, tnew);\r\n  rtsiSetSimTimeStep(si,MAJOR_TIME_STEP);\r\n}\r\n\r\n/*\r\n * Output and update for atomic system:\r\n *    '<S6>/MATLAB Function'\r\n *    '<S6>/MATLAB Function1'\r\n *    '<S7>/MATLAB Function'\r\n *    '<S7>/MATLAB Function1'\r\n */\r\nstatic void MATLABFunction(real_T rtu_u, real_T *rty_y)\r\n{\r\n  if (rtu_u == 0.0) {\r\n    *rty_y = -1.0;\r\n  } else {\r\n    *rty_y = 1.0;\r\n  }\r\n}\r\n\r\n/* Model step function */\r\nvoid TESTOUT_step(void)\r\n{\r\n  /* local block i/o variables */\r\n  real_T rtb_TransportDelay1;\r\n  real_T rtb_Sum_p;\r\n  real_T rtb_Sum;\r\n  real_T rtb_Sum_pd;\r\n  real_T rtb_Sum_c;\r\n  real_T rtb_Product;\r\n  real_T rtb_Product_d;\r\n  if (rtmIsMajorTimeStep(rtM)) {\r\n    /* set solver stop time */\r\n    rtsiSetSolverStopTime(&rtM->solverInfo,((rtM->Timing.clockTick0+1)*\r\n      rtM->Timing.stepSize0));\r\n  }                                    /* end MajorTimeStep */\r\n\r\n  /* Update absolute time of base rate at minor time step */\r\n  if (rtmIsMinorTimeStep(rtM)) {\r\n    rtM->Timing.t[0] = rtsiGetT(&rtM->solverInfo);\r\n  }\r\n\r\n  /* TransportDelay: '<S1>/Transport Delay' */\r\n  {\r\n    real_T **uBuffer = (real_T**)&rtDW.TransportDelay_PWORK.TUbufferPtrs[0];\r\n    real_T simTime = rtM->Timing.t[0];\r\n    real_T tMinusDelay = simTime - 1.0;\r\n    rtb_TransportDelay1 = rt_TDelayInterpolate(\r\n      tMinusDelay,\r\n      0.0,\r\n      *uBuffer,\r\n      rtDW.TransportDelay_IWORK.CircularBufSize,\r\n      &rtDW.TransportDelay_IWORK.Last,\r\n      rtDW.TransportDelay_IWORK.Tail,\r\n      rtDW.TransportDelay_IWORK.Head,\r\n      0.0,\r\n      0,\r\n      0);\r\n  }\r\n\r\n  /* Outport: '<Root>/Out1' */\r\n  rtY.Out1 = rtb_TransportDelay1;\r\n\r\n  /* TransportDelay: '<S1>/Transport Delay1' incorporates:\r\n   *  Integrator: '<S6>/Integrator1'\r\n   */\r\n  rtb_TransportDelay1 = rtX.Integrator1_CSTATE;\r\n  if (rtmIsMajorTimeStep(rtM) &&\r\n      rtM->Timing.TaskCounters.TID[3] == 0) {\r\n    /* Sum: '<S8>/Sum' incorporates:\r\n     *  Constant: '<S8>/Constant'\r\n     *  UnitDelay: '<S8>/Unit Delay'\r\n     */\r\n    rtb_Sum = 1.0 - rtDW.UnitDelay_DSTATE;\r\n\r\n    /* MATLAB Function: '<S6>/MATLAB Function' */\r\n    MATLABFunction(rtb_Sum, &rtDW.y_o);\r\n  }\r\n\r\n  /* Product: '<S6>/Product' */\r\n  rtb_Product = rtb_TransportDelay1 * rtDW.y_o;\r\n\r\n  /* MATLAB Function: '<S2>/0-Tm_y2' incorporates:\r\n   *  Constant: '<S2>/&#x62AC;&#x817F;&#x9AD8;&#x5EA6;2'\r\n   *  Constant: '<S2>/&#x6446;&#x52A8;&#x76F8;&#x5468;&#x671F;2'\r\n   */\r\n  if (rtb_Product > 0.0) {\r\n    rtb_Product_d = sin(12.566370614359172 * rtb_Product / 2.0) *\r\n      0.079577471545947673;\r\n    rtb_Product = ((1.0 - rtb_Product / 2.0) + rtb_Product_d) * 40.0 * (real_T)\r\n      ((rtb_Product >= 1.0) && (rtb_Product < 2.0)) + (rtb_Product / 2.0 -\r\n      rtb_Product_d) * 40.0 * (real_T)(rtb_Product < 1.0);\r\n  } else {\r\n    rtb_Product = 0.0;\r\n  }\r\n\r\n  /* End of MATLAB Function: '<S2>/0-Tm_y2' */\r\n\r\n  /* Sum: '<S2>/Sum' incorporates:\r\n   *  Constant: '<S2>/Constant'\r\n   */\r\n  rtb_Product -= 200.0;\r\n\r\n  /* TransportDelay: '<S1>/Transport Delay1' incorporates:\r\n   *  Integrator: '<S7>/Integrator1'\r\n   */\r\n  rtb_TransportDelay1 = rtX.Integrator1_CSTATE_k;\r\n  if (rtmIsMajorTimeStep(rtM) &&\r\n      rtM->Timing.TaskCounters.TID[4] == 0) {\r\n    /* Sum: '<S12>/Sum' incorporates:\r\n     *  Constant: '<S12>/Constant'\r\n     *  UnitDelay: '<S12>/Unit Delay'\r\n     */\r\n    rtb_Sum_c = 1.0 - rtDW.UnitDelay_DSTATE_c;\r\n\r\n    /* MATLAB Function: '<S7>/MATLAB Function' */\r\n    MATLABFunction(rtb_Sum_c, &rtDW.y_f);\r\n  }\r\n\r\n  /* Product: '<S7>/Product' */\r\n  rtb_Product_d = rtb_TransportDelay1 * rtDW.y_f;\r\n\r\n  /* MATLAB Function: '<S2>/0-Tm_x1' incorporates:\r\n   *  Constant: '<S2>/&#x6446;&#x52A8;&#x76F8;&#x5468;&#x671F;2'\r\n   *  Constant: '<S2>/&#x6B65;&#x957F;2'\r\n   */\r\n  if (rtb_Product_d > 0.0) {\r\n    rtb_Product_d = (rtb_Product_d / 2.0 - sin(6.2831853071795862 *\r\n      rtb_Product_d / 2.0) * 0.15915494309189535) * 100.0;\r\n  } else {\r\n    rtb_Product_d = (-rtb_Product_d / 2.0 - sin(6.2831853071795862 *\r\n      -rtb_Product_d / 2.0) * 0.15915494309189535) * 100.0;\r\n  }\r\n\r\n  /* End of MATLAB Function: '<S2>/0-Tm_x1' */\r\n\r\n  /* MATLAB Function: '<S1>/MATLAB Function' incorporates:\r\n   *  Sum: '<S2>/Sum1'\r\n   */\r\n  rtb_Product = sqrt((rtb_Product_d - 50.0) * (rtb_Product_d - 50.0) +\r\n                     rtb_Product * rtb_Product);\r\n  rtb_Product_d = asin((rtb_Product_d - 50.0) / rtb_Product) *\r\n    57.295779513082323;\r\n  rtb_Product = acos(((rtb_Product * rtb_Product + 10000.0) - 32400.0) / (200.0 *\r\n    rtb_Product)) * 57.295779513082323;\r\n  rtDW.y = rtb_Product - rtb_Product_d;\r\n  rtDW.w = rtb_Product + rtb_Product_d;\r\n\r\n  /* TransportDelay: '<S1>/Transport Delay1' */\r\n  {\r\n    real_T **uBuffer = (real_T**)&rtDW.TransportDelay1_PWORK.TUbufferPtrs[0];\r\n    real_T simTime = rtM->Timing.t[0];\r\n    real_T tMinusDelay = simTime - 1.0;\r\n    rtb_TransportDelay1 = rt_TDelayInterpolate(\r\n      tMinusDelay,\r\n      0.0,\r\n      *uBuffer,\r\n      rtDW.TransportDelay1_IWORK.CircularBufSize,\r\n      &rtDW.TransportDelay1_IWORK.Last,\r\n      rtDW.TransportDelay1_IWORK.Tail,\r\n      rtDW.TransportDelay1_IWORK.Head,\r\n      0.0,\r\n      0,\r\n      0);\r\n  }\r\n\r\n  /* Outport: '<Root>/Out2' */\r\n  rtY.Out2 = rtb_TransportDelay1;\r\n  if (rtmIsMajorTimeStep(rtM) &&\r\n      rtM->Timing.TaskCounters.TID[2] == 0) {\r\n    /* Sum: '<S9>/Sum' incorporates:\r\n     *  Constant: '<S9>/Constant'\r\n     *  UnitDelay: '<S9>/Unit Delay'\r\n     */\r\n    rtb_Sum_p = 1.0 - rtDW.UnitDelay_DSTATE_e;\r\n\r\n    /* MATLAB Function: '<S6>/MATLAB Function1' */\r\n    MATLABFunction(rtb_Sum_p, &rtDW.y_fq);\r\n  }\r\n\r\n  if (rtmIsMajorTimeStep(rtM) &&\r\n      rtM->Timing.TaskCounters.TID[3] == 0) {\r\n    /* Sum: '<S13>/Sum' incorporates:\r\n     *  Constant: '<S13>/Constant'\r\n     *  UnitDelay: '<S13>/Unit Delay'\r\n     */\r\n    rtb_Sum_pd = 1.0 - rtDW.UnitDelay_DSTATE_b;\r\n\r\n    /* MATLAB Function: '<S7>/MATLAB Function1' */\r\n    MATLABFunction(rtb_Sum_pd, &rtDW.y_l);\r\n  }\r\n\r\n  if (rtmIsMajorTimeStep(rtM)) {\r\n    /* Update for TransportDelay: '<S1>/Transport Delay' */\r\n    {\r\n      real_T **uBuffer = (real_T**)&rtDW.TransportDelay_PWORK.TUbufferPtrs[0];\r\n      real_T simTime = rtM->Timing.t[0];\r\n      rtDW.TransportDelay_IWORK.Head = ((rtDW.TransportDelay_IWORK.Head <\r\n        (rtDW.TransportDelay_IWORK.CircularBufSize-1)) ?\r\n        (rtDW.TransportDelay_IWORK.Head+1) : 0);\r\n      if (rtDW.TransportDelay_IWORK.Head == rtDW.TransportDelay_IWORK.Tail) {\r\n        rtDW.TransportDelay_IWORK.Tail = ((rtDW.TransportDelay_IWORK.Tail <\r\n          (rtDW.TransportDelay_IWORK.CircularBufSize-1)) ?\r\n          (rtDW.TransportDelay_IWORK.Tail+1) : 0);\r\n      }\r\n\r\n      (*uBuffer + rtDW.TransportDelay_IWORK.CircularBufSize)\r\n        [rtDW.TransportDelay_IWORK.Head] = simTime;\r\n      (*uBuffer)[rtDW.TransportDelay_IWORK.Head] = rtDW.w;\r\n    }\r\n\r\n    if (rtmIsMajorTimeStep(rtM) &&\r\n        rtM->Timing.TaskCounters.TID[3] == 0) {\r\n      /* Update for UnitDelay: '<S8>/Unit Delay' */\r\n      rtDW.UnitDelay_DSTATE = rtb_Sum;\r\n    }\r\n\r\n    if (rtmIsMajorTimeStep(rtM) &&\r\n        rtM->Timing.TaskCounters.TID[4] == 0) {\r\n      /* Update for UnitDelay: '<S12>/Unit Delay' */\r\n      rtDW.UnitDelay_DSTATE_c = rtb_Sum_c;\r\n    }\r\n\r\n    /* Update for TransportDelay: '<S1>/Transport Delay1' */\r\n    {\r\n      real_T **uBuffer = (real_T**)&rtDW.TransportDelay1_PWORK.TUbufferPtrs[0];\r\n      real_T simTime = rtM->Timing.t[0];\r\n      rtDW.TransportDelay1_IWORK.Head = ((rtDW.TransportDelay1_IWORK.Head <\r\n        (rtDW.TransportDelay1_IWORK.CircularBufSize-1)) ?\r\n        (rtDW.TransportDelay1_IWORK.Head+1) : 0);\r\n      if (rtDW.TransportDelay1_IWORK.Head == rtDW.TransportDelay1_IWORK.Tail) {\r\n        rtDW.TransportDelay1_IWORK.Tail = ((rtDW.TransportDelay1_IWORK.Tail <\r\n          (rtDW.TransportDelay1_IWORK.CircularBufSize-1)) ?\r\n          (rtDW.TransportDelay1_IWORK.Tail+1) : 0);\r\n      }\r\n\r\n      (*uBuffer + rtDW.TransportDelay1_IWORK.CircularBufSize)\r\n        [rtDW.TransportDelay1_IWORK.Head] = simTime;\r\n      (*uBuffer)[rtDW.TransportDelay1_IWORK.Head] = rtDW.y;\r\n    }\r\n\r\n    if (rtmIsMajorTimeStep(rtM) &&\r\n        rtM->Timing.TaskCounters.TID[2] == 0) {\r\n      /* Update for UnitDelay: '<S9>/Unit Delay' */\r\n      rtDW.UnitDelay_DSTATE_e = rtb_Sum_p;\r\n    }\r\n\r\n    if (rtmIsMajorTimeStep(rtM) &&\r\n        rtM->Timing.TaskCounters.TID[3] == 0) {\r\n      /* Update for UnitDelay: '<S13>/Unit Delay' */\r\n      rtDW.UnitDelay_DSTATE_b = rtb_Sum_pd;\r\n    }\r\n  }                                    /* end MajorTimeStep */\r\n\r\n  if (rtmIsMajorTimeStep(rtM)) {\r\n    rt_ertODEUpdateContinuousStates(&rtM->solverInfo);\r\n\r\n    /* Update absolute time for base rate */\r\n    /* The \"clockTick0\" counts the number of times the code of this task has\r\n     * been executed. The absolute time is the multiplication of \"clockTick0\"\r\n     * and \"Timing.stepSize0\". Size of \"clockTick0\" ensures timer will not\r\n     * overflow during the application lifespan selected.\r\n     */\r\n    ++rtM->Timing.clockTick0;\r\n    rtM->Timing.t[0] = rtsiGetSolverStopTime(&rtM->solverInfo);\r\n\r\n    {\r\n      /* Update absolute timer for sample time: [0.0001s, 0.0s] */\r\n      /* The \"clockTick1\" counts the number of times the code of this task has\r\n       * been executed. The resolution of this integer timer is 0.0001, which is the step size\r\n       * of the task. Size of \"clockTick1\" ensures timer will not overflow during the\r\n       * application lifespan selected.\r\n       */\r\n      rtM->Timing.clockTick1++;\r\n    }\r\n\r\n    rate_scheduler();\r\n  }                                    /* end MajorTimeStep */\r\n}\r\n\r\n/* Derivatives for root system: '<Root>' */\r\nvoid TESTOUT_derivatives(void)\r\n{\r\n  XDot *_rtXdot;\r\n  _rtXdot = ((XDot *) rtM->derivs);\r\n\r\n  /* Derivatives for Integrator: '<S6>/Integrator1' */\r\n  _rtXdot->Integrator1_CSTATE = rtDW.y_fq;\r\n\r\n  /* Derivatives for Integrator: '<S7>/Integrator1' */\r\n  _rtXdot->Integrator1_CSTATE_k = rtDW.y_l;\r\n}\r\n\r\n/* Model initialize function */\r\nvoid TESTOUT_initialize(void)\r\n{\r\n  /* Registration code */\r\n  {\r\n    /* Setup solver object */\r\n    rtsiSetSimTimeStepPtr(&rtM->solverInfo, &rtM->Timing.simTimeStep);\r\n    rtsiSetTPtr(&rtM->solverInfo, &rtmGetTPtr(rtM));\r\n    rtsiSetStepSizePtr(&rtM->solverInfo, &rtM->Timing.stepSize0);\r\n    rtsiSetdXPtr(&rtM->solverInfo, &rtM->derivs);\r\n    rtsiSetContStatesPtr(&rtM->solverInfo, (real_T **) &rtM->contStates);\r\n    rtsiSetNumContStatesPtr(&rtM->solverInfo, &rtM->Sizes.numContStates);\r\n    rtsiSetNumPeriodicContStatesPtr(&rtM->solverInfo,\r\n      &rtM->Sizes.numPeriodicContStates);\r\n    rtsiSetPeriodicContStateIndicesPtr(&rtM->solverInfo,\r\n      &rtM->periodicContStateIndices);\r\n    rtsiSetPeriodicContStateRangesPtr(&rtM->solverInfo,\r\n      &rtM->periodicContStateRanges);\r\n    rtsiSetErrorStatusPtr(&rtM->solverInfo, (&rtmGetErrorStatus(rtM)));\r\n    rtsiSetRTModelPtr(&rtM->solverInfo, rtM);\r\n  }\r\n\r\n  rtsiSetSimTimeStep(&rtM->solverInfo, MAJOR_TIME_STEP);\r\n  rtM->intgData.y = rtM->odeY;\r\n  rtM->intgData.f[0] = rtM->odeF[0];\r\n  rtM->intgData.f[1] = rtM->odeF[1];\r\n  rtM->intgData.f[2] = rtM->odeF[2];\r\n  rtM->contStates = ((X *) &rtX);\r\n  rtsiSetSolverData(&rtM->solverInfo, (void *)&rtM->intgData);\r\n  rtsiSetIsMinorTimeStepWithModeChange(&rtM->solverInfo, false);\r\n  rtsiSetSolverName(&rtM->solverInfo,\"ode3\");\r\n  rtmSetTPtr(rtM, &rtM->Timing.tArray[0]);\r\n  rtM->Timing.stepSize0 = 0.0001;\r\n\r\n  /* Start for TransportDelay: '<S1>/Transport Delay' */\r\n  {\r\n    real_T *pBuffer = &rtDW.TransportDelay_RWORK.TUbufferArea[0];\r\n    rtDW.TransportDelay_IWORK.Tail = 0;\r\n    rtDW.TransportDelay_IWORK.Head = 0;\r\n    rtDW.TransportDelay_IWORK.Last = 0;\r\n    rtDW.TransportDelay_IWORK.CircularBufSize = 1024;\r\n    pBuffer[0] = 0.0;\r\n    pBuffer[1024] = rtM->Timing.t[0];\r\n    rtDW.TransportDelay_PWORK.TUbufferPtrs[0] = (void *) &pBuffer[0];\r\n  }\r\n\r\n  /* Start for TransportDelay: '<S1>/Transport Delay1' */\r\n  {\r\n    real_T *pBuffer = &rtDW.TransportDelay1_RWORK.TUbufferArea[0];\r\n    rtDW.TransportDelay1_IWORK.Tail = 0;\r\n    rtDW.TransportDelay1_IWORK.Head = 0;\r\n    rtDW.TransportDelay1_IWORK.Last = 0;\r\n    rtDW.TransportDelay1_IWORK.CircularBufSize = 1024;\r\n    pBuffer[0] = 0.0;\r\n    pBuffer[1024] = rtM->Timing.t[0];\r\n    rtDW.TransportDelay1_PWORK.TUbufferPtrs[0] = (void *) &pBuffer[0];\r\n  }\r\n\r\n  /* InitializeConditions for Integrator: '<S6>/Integrator1' */\r\n  rtX.Integrator1_CSTATE = 0.0;\r\n\r\n  /* InitializeConditions for Integrator: '<S7>/Integrator1' */\r\n  rtX.Integrator1_CSTATE_k = 0.0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"TESTOUT.h","type":"header","group":"model","path":"F:\\THE_LIBRARY\\CODE_BASE\\ROBOSERVO\\Odrive\\TINDALOS_THEDOG\\SIM_MATLAB\\TESTOUT_ert_rtw","tag":"","groupDisplay":"模型文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: TESTOUT.h\r\n *\r\n * Code generated for Simulink model 'TESTOUT'.\r\n *\r\n * Model version                  : 1.53\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Thu Apr 18 11:16:35 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_TESTOUT_h_\r\n#define RTW_HEADER_TESTOUT_h_\r\n#ifndef TESTOUT_COMMON_INCLUDES_\r\n#define TESTOUT_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#include \"rtw_continuous.h\"\r\n#include \"rtw_solver.h\"\r\n#endif                                 /* TESTOUT_COMMON_INCLUDES_ */\r\n\r\n#include <float.h>\r\n#include <math.h>\r\n#include <string.h>\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n#ifndef rtmGetStopRequested\r\n#define rtmGetStopRequested(rtm)       ((rtm)->Timing.stopRequestedFlag)\r\n#endif\r\n\r\n#ifndef rtmSetStopRequested\r\n#define rtmSetStopRequested(rtm, val)  ((rtm)->Timing.stopRequestedFlag = (val))\r\n#endif\r\n\r\n#ifndef rtmGetStopRequestedPtr\r\n#define rtmGetStopRequestedPtr(rtm)    (&((rtm)->Timing.stopRequestedFlag))\r\n#endif\r\n\r\n#ifndef rtmGetT\r\n#define rtmGetT(rtm)                   (rtmGetTPtr((rtm))[0])\r\n#endif\r\n\r\n#ifndef rtmGetTPtr\r\n#define rtmGetTPtr(rtm)                ((rtm)->Timing.t)\r\n#endif\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM RT_MODEL;\r\n\r\n/* Block signals and states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  struct {\r\n    real_T modelTStart;\r\n    real_T TUbufferArea[2048];\r\n  } TransportDelay_RWORK;              /* '<S1>/Transport Delay' */\r\n\r\n  struct {\r\n    real_T modelTStart;\r\n    real_T TUbufferArea[2048];\r\n  } TransportDelay1_RWORK;             /* '<S1>/Transport Delay1' */\r\n\r\n  real_T y;                            /* '<S1>/MATLAB Function' */\r\n  real_T w;                            /* '<S1>/MATLAB Function' */\r\n  real_T y_l;                          /* '<S7>/MATLAB Function1' */\r\n  real_T y_f;                          /* '<S7>/MATLAB Function' */\r\n  real_T y_fq;                         /* '<S6>/MATLAB Function1' */\r\n  real_T y_o;                          /* '<S6>/MATLAB Function' */\r\n  real_T UnitDelay_DSTATE;             /* '<S8>/Unit Delay' */\r\n  real_T UnitDelay_DSTATE_c;           /* '<S12>/Unit Delay' */\r\n  real_T UnitDelay_DSTATE_e;           /* '<S9>/Unit Delay' */\r\n  real_T UnitDelay_DSTATE_b;           /* '<S13>/Unit Delay' */\r\n  struct {\r\n    int_T Tail;\r\n    int_T Head;\r\n    int_T Last;\r\n    int_T CircularBufSize;\r\n  } TransportDelay_IWORK;              /* '<S1>/Transport Delay' */\r\n\r\n  struct {\r\n    int_T Tail;\r\n    int_T Head;\r\n    int_T Last;\r\n    int_T CircularBufSize;\r\n  } TransportDelay1_IWORK;             /* '<S1>/Transport Delay1' */\r\n\r\n  struct {\r\n    void *TUbufferPtrs[2];\r\n  } TransportDelay_PWORK;              /* '<S1>/Transport Delay' */\r\n\r\n  struct {\r\n    void *TUbufferPtrs[2];\r\n  } TransportDelay1_PWORK;             /* '<S1>/Transport Delay1' */\r\n} DW;\r\n\r\n/* Continuous states (default storage) */\r\ntypedef struct {\r\n  real_T Integrator1_CSTATE;           /* '<S6>/Integrator1' */\r\n  real_T Integrator1_CSTATE_k;         /* '<S7>/Integrator1' */\r\n} X;\r\n\r\n/* State derivatives (default storage) */\r\ntypedef struct {\r\n  real_T Integrator1_CSTATE;           /* '<S6>/Integrator1' */\r\n  real_T Integrator1_CSTATE_k;         /* '<S7>/Integrator1' */\r\n} XDot;\r\n\r\n/* State disabled  */\r\ntypedef struct {\r\n  boolean_T Integrator1_CSTATE;        /* '<S6>/Integrator1' */\r\n  boolean_T Integrator1_CSTATE_k;      /* '<S7>/Integrator1' */\r\n} XDis;\r\n\r\n#ifndef ODE3_INTG\r\n#define ODE3_INTG\r\n\r\n/* ODE3 Integration Data */\r\ntypedef struct {\r\n  real_T *y;                           /* output */\r\n  real_T *f[3];                        /* derivatives */\r\n} ODE3_IntgData;\r\n\r\n#endif\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\ntypedef struct {\r\n  real_T Out1;                         /* '<Root>/Out1' */\r\n  real_T Out2;                         /* '<Root>/Out2' */\r\n} ExtY;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM {\r\n  const char_T *errorStatus;\r\n  RTWSolverInfo solverInfo;\r\n  X *contStates;\r\n  int_T *periodicContStateIndices;\r\n  real_T *periodicContStateRanges;\r\n  real_T *derivs;\r\n  XDis *contStateDisabled;\r\n  boolean_T zCCacheNeedsReset;\r\n  boolean_T derivCacheNeedsReset;\r\n  boolean_T CTOutputIncnstWithState;\r\n  real_T odeY[2];\r\n  real_T odeF[3][2];\r\n  ODE3_IntgData intgData;\r\n\r\n  /*\r\n   * Sizes:\r\n   * The following substructure contains sizes information\r\n   * for many of the model attributes such as inputs, outputs,\r\n   * dwork, sample times, etc.\r\n   */\r\n  struct {\r\n    int_T numContStates;\r\n    int_T numPeriodicContStates;\r\n    int_T numSampTimes;\r\n  } Sizes;\r\n\r\n  /*\r\n   * Timing:\r\n   * The following substructure contains information regarding\r\n   * the timing information for the model.\r\n   */\r\n  struct {\r\n    uint32_T clockTick0;\r\n    time_T stepSize0;\r\n    uint32_T clockTick1;\r\n    struct {\r\n      uint16_T TID[5];\r\n    } TaskCounters;\r\n\r\n    SimTimeStep simTimeStep;\r\n    boolean_T stopRequestedFlag;\r\n    time_T *t;\r\n    time_T tArray[5];\r\n  } Timing;\r\n};\r\n\r\n/* Continuous states (default storage) */\r\nextern X rtX;\r\n\r\n/* Block signals and states (default storage) */\r\nextern DW rtDW;\r\n\r\n/* External outputs (root outports fed by signals with default storage) */\r\nextern ExtY rtY;\r\n\r\n/* Model entry point functions */\r\nextern void TESTOUT_initialize(void);\r\nextern void TESTOUT_step(void);\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL *const rtM;\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<S1>/Scope2' : Unused code path elimination\r\n * Block '<S1>/Scope3' : Unused code path elimination\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Note that this particular code originates from a subsystem build,\r\n * and has its own system numbers different from the parent model.\r\n * Refer to the system hierarchy for this subsystem below, and use the\r\n * MATLAB hilite_system command to trace the generated code back\r\n * to the parent model.  For example,\r\n *\r\n * hilite_system('OUTTO_STMCODEER/TESTOUT')    - opens subsystem OUTTO_STMCODEER/TESTOUT\r\n * hilite_system('OUTTO_STMCODEER/TESTOUT/Kp') - opens and selects block Kp\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'OUTTO_STMCODEER'\r\n * '<S1>'   : 'OUTTO_STMCODEER/TESTOUT'\r\n * '<S2>'   : 'OUTTO_STMCODEER/TESTOUT/BEZIER'\r\n * '<S3>'   : 'OUTTO_STMCODEER/TESTOUT/MATLAB Function'\r\n * '<S4>'   : 'OUTTO_STMCODEER/TESTOUT/BEZIER/0-Tm_x1'\r\n * '<S5>'   : 'OUTTO_STMCODEER/TESTOUT/BEZIER/0-Tm_y2'\r\n * '<S6>'   : 'OUTTO_STMCODEER/TESTOUT/BEZIER/Subsystem'\r\n * '<S7>'   : 'OUTTO_STMCODEER/TESTOUT/BEZIER/Subsystem1'\r\n * '<S8>'   : 'OUTTO_STMCODEER/TESTOUT/BEZIER/Subsystem/Clock'\r\n * '<S9>'   : 'OUTTO_STMCODEER/TESTOUT/BEZIER/Subsystem/Clock1'\r\n * '<S10>'  : 'OUTTO_STMCODEER/TESTOUT/BEZIER/Subsystem/MATLAB Function'\r\n * '<S11>'  : 'OUTTO_STMCODEER/TESTOUT/BEZIER/Subsystem/MATLAB Function1'\r\n * '<S12>'  : 'OUTTO_STMCODEER/TESTOUT/BEZIER/Subsystem1/Clock'\r\n * '<S13>'  : 'OUTTO_STMCODEER/TESTOUT/BEZIER/Subsystem1/Clock1'\r\n * '<S14>'  : 'OUTTO_STMCODEER/TESTOUT/BEZIER/Subsystem1/MATLAB Function'\r\n * '<S15>'  : 'OUTTO_STMCODEER/TESTOUT/BEZIER/Subsystem1/MATLAB Function1'\r\n */\r\n#endif                                 /* RTW_HEADER_TESTOUT_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"F:\\THE_LIBRARY\\CODE_BASE\\ROBOSERVO\\Odrive\\TINDALOS_THEDOG\\SIM_MATLAB\\TESTOUT_ert_rtw","tag":"","groupDisplay":"实用工具文件","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'TESTOUT'.\r\n *\r\n * Model version                  : 1.53\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Thu Apr 18 11:16:35 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: ARM Compatible->ARM Cortex-M\r\n * Code generation objectives:\r\n *    1. Execution efficiency\r\n *    2. RAM efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: ARM Compatible->ARM Cortex-M\r\n *   Number of bits:     char:   8    short:   16    int:  32\r\n *                       long:  32    long long:  64\r\n *                       native word size:  32\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef short int16_T;\r\ntypedef unsigned short uint16_T;\r\ntypedef int int32_T;\r\ntypedef unsigned int uint32_T;\r\ntypedef long long int64_T;\r\ntypedef unsigned long long uint64_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T, ulonglong_T.           *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef unsigned long long ulonglong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807LL))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807LL-1LL))\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFULL))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true}};